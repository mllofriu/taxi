setwd("~/work/rat_simulator/logs/ControlNoObsWithRandomPCLocation")
source('~/work/rat_simulator/logs/ControlNoObsWithRandomPCLocation/plotRuntimes.r', echo=TRUE)
runtimes
?save
?write.csv
setwd("~/Documents/workspace/taxi")
loda('rte.Rdata')
load('rte.Rdata')
rte
head (rte)
rte["method"]
rte[rte["method"]=="Normal QL", "method"]
rte[rte["method"]=="Normal QL", "method"]  <- "Canonical QL"
rte
head(rte)
rte[rte["method"]=="Normal QL", "method"]
rte[rte["method"]=="Normal QL", "method"]
rte[rte["method"]=="Normal QL", "method"]  <- "Canonical QL"
rte[rte["method"]=="Normal QL", "method"]  <- rep("Canonical QL", 10000)
rte[rte["method"]=="Normal QL", "method"]  <- rep("Canonical QL", 10001)
rte[rte["method"]=="Normal QL", "method"]  <- rep("Canonical QL", 9999)
rte[rte["method"]=="Normal QL", "method"]
load('rte.Rdata')
names(rte)
names(rte["method"])
names(rte[,"method"])
names(rte["method"])
class(rte["method"])
factor(rte["method"])
rte["method"]
rte["method"][1]
rte["method"][[1]]
rte["method",]
rte[m"method"]
rte[,"method"]
levels(rte[,"method"])
levels(rte[,"method"]) <- c("Multi-Scale QL" , "Canonical QL")
rteSum <- ddply(rte, .(episode, method), summarise, meanSteps = mean(steps))
rte.aov <- aov(steps ~ factor(episode):method, data=rte)
tuk <- TukeyHSD(rte.aov)
index <- foreach (i=1:numEpisodes) %do% paste(i,":Normal QL-",i,":Multi-Scale QL",sep="")
ps <- tuk$"factor(episode):method"[unlist(index),'p adj']
ps < 0.05
save (rte, file="rte.Rdata")
library('sp')
library('rgeos')
library('doParallel')
library('plyr')
library('ggplot2')
source('graphics.R')
source('movement.R')
source('taxic.R')
source('genericql.R')
rteSum <- ddply(rte, .(episode, method), summarise, meanSteps = mean(steps))
rte.aov <- aov(steps ~ factor(episode):method, data=rte)
tuk <- TukeyHSD(rte.aov)
index <- foreach (i=1:numEpisodes) %do% paste(i,":Normal QL-",i,":Multi-Scale QL",sep="")
ps <- tuk$"factor(episode):method"[unlist(index),'p adj']
ps < 0.05
save (rte, file="rte.Rdata")
numTrials <- 100
numEpisodes <- 100
rteSum <- ddply(rte, .(episode, method), summarise, meanSteps = mean(steps))
rte.aov <- aov(steps ~ factor(episode):method, data=rte)
tuk <- TukeyHSD(rte.aov)
index <- foreach (i=1:numEpisodes) %do% paste(i,":Normal QL-",i,":Multi-Scale QL",sep="")
ps <- tuk$"factor(episode):method"[unlist(index),'p adj']
ps < 0.05
save (rte, file="rte.Rdata")
names(rteSum)[names(rteSum) == "method"] <- "Method"
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16))
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
opts(legend.position = c(0, 1),
legend.justification = c(0, 1))
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
opts(legend.position = c(1, 1),
legend.justification = c(1, 1))
meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
opts(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.b
legend.background = theme_rect(colour = "black"))
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
opts(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.background = theme_rect(colour = "black"))
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
theme(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.background = theme_rect(colour = "black"))
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
theme(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_rect(colour = "black"))
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
theme(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_rect(colour = "black", fill = NA))
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
theme(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_rect(colour = NA, fill = NA))
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
theme(panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
panel.border = theme_blank(),
panel.background = theme_blank()) +
theme(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_rect(colour = NA, fill = NA))
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
theme(panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
panel.background = theme_blank()) +
theme(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_rect(colour = NA, fill = NA))
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
theme(panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank(),
) +
theme(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_rect(colour = NA, fill = NA))
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
theme(panel.grid.major = theme_blank(),
panel.grid.minor = theme_blank()
) +
theme(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_rect(colour = NA, fill = NA))
#dev.off()
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
theme(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_rect(colour = NA, fill = NA))
#dev.off()
source('~/.active-rstudio-document', echo=TRUE)
png('rte.png')
qplot(episode, meanSteps, data=rteSum, geom=c('point', 'line'), color=Method) +
ylab("Num. of Steps") + xlab("Episode") +
theme(legend.text = element_text(size=16), legend.title = element_text(size=16)) +
theme(legend.position = c(1, 1),
legend.justification = c(1, 1),
legend.background = element_rect(colour = NA, fill = NA))
dev.off()
rte.aov <- aov(steps ~ factor(episode):method, data=rte)
tuk <- TukeyHSD(rte.aov)
index <- foreach (i=1:numEpisodes) %do% paste(i,":Normal QL-",i,":Multi-Scale QL",sep="")
index <- foreach (i=1:numEpisodes) %do% paste(i,":Canonical QL-",i,":Multi-Scale QL",sep="")
ps <- tuk$"factor(episode):method"[unlist(index),'p adj']
ps < 0.05
source('~/Documents/workspace/taxi/simulation.R', echo=TRUE)
source('~/Documents/workspace/taxi/simulation.R', echo=TRUE)
source('~/Documents/workspace/taxi/simulation.R', echo=TRUE)
source('~/Documents/workspace/taxi/simulation.R', echo=TRUE)
source('~/Documents/workspace/taxi/simulation.R', echo=TRUE)
